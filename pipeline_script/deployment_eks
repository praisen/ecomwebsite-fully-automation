pipeline {
    agent any

    parameters {
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS region')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '309395755719', description: 'Your AWS account ID')
        string(name: 'ECR_REPO_NAME', defaultValue: 'ecowordlylife', description: 'ECR repository name')
        string(name: 'VERSION', defaultValue: 'latest', description: 'Image version tag')
        string(name: 'CLUSTER_NAME', defaultValue: 'ecowordlylife-cluster', description: 'EKS cluster name')
    }

    stages {
        stage("Clone WordPress Config") {
            steps {
                git branch: 'main', 
                url: 'https://github.com/your-username/ecowordlylife-kubernetes.git'
            }
        }
        
        stage("Configure EKS Access") {
            steps {
                script {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                                      secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh """
                        aws eks update-kubeconfig \
                          --region ${params.AWS_REGION} \
                          --name ${params.CLUSTER_NAME}
                        """
                    }
                }
            }
        }

        stage("Prepare WordPress Deployment") {
            steps {
                script {
                    def WORDPRESS_IMAGE = "${params.AWS_ACCOUNT_ID}.dkr.ecr.${params.AWS_REGION}.amazonaws.com/${params.ECR_REPO_NAME}:${params.VERSION}"
                    
                    // Update WordPress deployment
                    sh """
                    sed -i 's|{{IMAGE}}|${WORDPRESS_IMAGE}|g' kubernetes/wordpress-deployment.yaml
                    sed -i 's|{{DB_HOST}}|mysql-service|g' kubernetes/wordpress-deployment.yaml
                    """
                    
                    // Update MySQL secret
                    sh "kubectl apply -f kubernetes/mysql-secret.yaml"
                }
            }
        }

        stage("Deploy WordPress Stack") {
            steps {
                script {
                    // Database first
                    sh "kubectl apply -f kubernetes/mysql-pvc.yaml"
                    sh "kubectl apply -f kubernetes/mysql-deployment.yaml"
                    sh "kubectl apply -f kubernetes/mysql-service.yaml"
                    
                    // WordPress components
                    sh "kubectl apply -f kubernetes/wordpress-pvc.yaml"
                    sh "kubectl apply -f kubernetes/wordpress-deployment.yaml"
                    sh "kubectl apply -f kubernetes/wordpress-service.yaml"
                    
                    // Monitoring
                    sh "kubectl apply -f kubernetes/wordpress-monitoring.yaml"
                }
            }
        }
    }

    post {
        success {
            script {
                sh """
                echo "Deployment Successful! Access your WordPress site at:"
                kubectl get svc wordpress-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
                """
            }
        }
        failure {
            slackSend channel: '#deployments',
                     color: 'danger',
                     message: "WordPress deployment failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}"
        }
    }
}
