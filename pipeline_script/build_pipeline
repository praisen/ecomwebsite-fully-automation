pipeline {
    agent any
    
    parameters {
        string(name: 'ECR_REPO_NAME', defaultValue: 'ecowordlylife', description: 'ECR repository name')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '309395755719', description: 'AWS Account ID')
    }
    
    environment {
        SCANNER_HOME = tool 'SonarQube Scanner'
    }
    
    stages {
        stage('1. Git Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/your-username/your-wordpress-repo.git'
            }
        }
        
        stage('2. SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=ecowordlylife \
                    -Dsonar.projectKey=ecowordlylife
                    """
                }
            }
        }
        
        stage('3. Quality Gate') {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }
        
        stage('4. Trivy Security Scan') {
            steps {
                sh "trivy fs . > trivy-scan-results.txt"
            }
        }
        
        stage('5. Build Docker Image') {
            steps {
                sh "docker build -t ${params.ECR_REPO_NAME} ."
            }
        }
        
        stage('6. Configure ECR Repository') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh """
                    aws ecr describe-repositories \
                    --repository-names ${params.ECR_REPO_NAME} \
                    --region us-east-1 || \
                    aws ecr create-repository \
                    --repository-name ${params.ECR_REPO_NAME} \
                    --region us-east-1
                    """
                }
            }
        }
        
        stage('7. ECR Login & Tag Image') {
            steps {
                sh """
                aws ecr get-login-password --region us-east-1 | \
                docker login --username AWS --password-stdin \
                ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com
                
                docker tag ${params.ECR_REPO_NAME} \
                ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                """
            }
        }
        
        stage('8. Push to ECR') {
            steps {
                sh """
                docker push \
                ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                """
            }
        }

        stage('9. Deploy Monitoring Stack') {
            steps {
                script {
                    // Install Prometheus
                    sh """
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    helm repo update
                    helm upgrade --install prometheus prometheus-community/prometheus \
                    --namespace ${KUBE_NAMESPACE} \
                    --create-namespace \
                    --set server.persistentVolume.storageClass="gp2"
                    """
                    
                    // Install Grafana
                    sh """
                    helm repo add grafana https://grafana.github.io/helm-charts
                    helm upgrade --install grafana grafana/grafana \
                    --namespace ${KUBE_NAMESPACE} \
                    --set persistence.storageClassName="gp2" \
                    --set service.type=LoadBalancer
                    """
                    
                    // Get Grafana credentials
                    sh """
                    kubectl get secret --namespace ${KUBE_NAMESPACE} grafana -o jsonpath="{.data.admin-password}" | base64 --decode > grafana-password.txt
                    """
                }
            }
        }

        stage('10. Cleanup Images') {
            steps {
                sh """
                docker rmi ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest
                docker rmi ${params.ECR_REPO_NAME}
                docker image prune -f
                """
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'trivy-scan-results.txt,grafana-password.txt', allowEmptyArchive: true
        }
    }
}
