stage('9. Deploy WordPress Monitoring') {
    steps {
        script {
            // Install Prometheus with WordPress-specific configuration
            sh """
            helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace ${KUBE_NAMESPACE} \
            --create-namespace \
            --set server.persistentVolume.storageClass="gp2" \
            --set server.extraScrapeConfigs="
              - job_name: 'wordpress'
                static_configs:
                  - targets: ['ecowordlylife-service:80']
                metrics_path: '/wp-json/prometheus/v1/metrics'
            "
            """
            
            // Install Grafana with WordPress dashboard
            sh """
            helm upgrade --install grafana grafana/grafana \
            --namespace ${KUBE_NAMESPACE} \
            --set persistence.storageClassName="gp2" \
            --set service.type=LoadBalancer \
            --set dashboardsProvider.enabled=true \
            --set 'dashboardsConfigMaps[0].configMapName=grafana-dashboards' \
            --set 'dashboardsConfigMaps[0].fileName=wordpress-dashboard.json'
            """
            
            // Configure WordPress metrics exporter
            sh """
            kubectl apply -f - <<EOF
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: wordpress-exporter
              namespace: ${KUBE_NAMESPACE}
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: wordpress-exporter
              template:
                metadata:
                  labels:
                    app: wordpress-exporter
                spec:
                  containers:
                  - name: exporter
                    image: prometheuscommunity/wordpress-exporter
                    env:
                    - name: WP_EXPORTER_URL
                      value: "http://ecowordlylife-service"
            EOF
            """
            
            // Get monitoring credentials
            sh """
            kubectl get secret --namespace ${KUBE_NAMESPACE} grafana -o jsonpath="{.data.admin-password}" | base64 --decode > ecowordlylife-grafana-creds.txt
            """
        }
    }
}

stage('10. Cleanup Build Artifacts') {
    steps {
        script {
            // Remove Docker images
            sh """
            docker rmi -f \
            ${params.AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${params.ECR_REPO_NAME}:latest \
            ${params.ECR_REPO_NAME} || true
            """
            
            // Cleanup unused resources
            sh """
            docker system prune -af
            rm -rf /tmp/ecowordlylife-build-*
            """
            
            // Verify cleanup
            sh """
            echo "Remaining images:"
            docker images | grep -E 'ecowordlylife|prometheus|grafana'
            """
        }
    }
}
